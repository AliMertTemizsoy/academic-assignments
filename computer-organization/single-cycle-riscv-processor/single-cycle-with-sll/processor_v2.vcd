$date
	Sun May 04 14:54:05 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module riscv_processor_v2_tb $end
$var wire 32 ! instr [31:0] $end
$var wire 32 " write_data [31:0] $end
$var wire 32 # read_data [31:0] $end
$var wire 32 $ pc_current [31:0] $end
$var wire 1 % mem_write $end
$var wire 32 & alu_result [31:0] $end
$var reg 1 ' clk $end
$var reg 1 ( reset $end
$var integer 32 ) pc_monitor [31:0] $end
$scope module dut $end
$var wire 1 ' clk $end
$var wire 32 * instr [31:0] $end
$var wire 32 + read_data [31:0] $end
$var wire 1 ( reset $end
$var wire 1 , zero $end
$var wire 32 - write_data [31:0] $end
$var wire 1 . result_src $end
$var wire 1 / reg_write $end
$var wire 1 0 pc_src $end
$var wire 32 1 pc_current [31:0] $end
$var wire 1 % mem_write $end
$var wire 1 2 jump $end
$var wire 2 3 imm_src [1:0] $end
$var wire 1 4 alu_src $end
$var wire 32 5 alu_result [31:0] $end
$var wire 3 6 alu_control [2:0] $end
$scope module cu $end
$var wire 3 7 funct3 [2:0] $end
$var wire 1 8 funct7_5 $end
$var wire 7 9 opcode [6:0] $end
$var wire 1 : reset $end
$var wire 1 , zero $end
$var wire 1 ; result_src_internal $end
$var wire 1 < reg_write_internal $end
$var wire 1 = mem_write_internal $end
$var wire 1 > jump_internal $end
$var wire 2 ? imm_src_internal [1:0] $end
$var wire 1 @ branch_internal $end
$var wire 1 A alu_src_internal $end
$var wire 2 B alu_op_internal [1:0] $end
$var wire 3 C alu_control_internal [2:0] $end
$var reg 3 D alu_control [2:0] $end
$var reg 1 4 alu_src $end
$var reg 2 E imm_src [1:0] $end
$var reg 1 2 jump $end
$var reg 1 % mem_write $end
$var reg 1 0 pc_src $end
$var reg 1 / reg_write $end
$var reg 1 . result_src $end
$scope module ad $end
$var wire 3 F funct3 [2:0] $end
$var wire 1 8 funct7_5 $end
$var wire 2 G alu_op [1:0] $end
$var reg 3 H alu_control [2:0] $end
$upscope $end
$scope module md $end
$var wire 7 I opcode [6:0] $end
$var wire 1 : reset $end
$var reg 2 J alu_op [1:0] $end
$var reg 1 A alu_src $end
$var reg 1 @ branch $end
$var reg 2 K imm_src [1:0] $end
$var reg 1 > jump $end
$var reg 1 = mem_write $end
$var reg 1 < reg_write $end
$var reg 1 ; result_src $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 L alu_control [2:0] $end
$var wire 1 4 alu_src $end
$var wire 1 ' clk $end
$var wire 2 M imm_src [1:0] $end
$var wire 32 N instr [31:0] $end
$var wire 1 2 jump $end
$var wire 1 % mem_write $end
$var wire 1 0 pc_src $end
$var wire 32 O read_data [31:0] $end
$var wire 1 / reg_write $end
$var wire 1 ( reset $end
$var wire 1 . result_src $end
$var wire 1 , zero $end
$var wire 32 P write_data [31:0] $end
$var wire 32 Q src_b [31:0] $end
$var wire 32 R src_a [31:0] $end
$var wire 32 S result [31:0] $end
$var wire 32 T pc_target [31:0] $end
$var wire 32 U pc_plus4 [31:0] $end
$var wire 32 V pc_next [31:0] $end
$var wire 32 W pc_current [31:0] $end
$var wire 32 X imm_ext [31:0] $end
$var wire 32 Y alu_result [31:0] $end
$scope module imm_generator $end
$var wire 2 Z imm_src [1:0] $end
$var wire 32 [ instr [31:0] $end
$var reg 32 \ imm_ext [31:0] $end
$upscope $end
$scope module main_alu $end
$var wire 3 ] alu_control [2:0] $end
$var wire 32 ^ src_b [31:0] $end
$var wire 1 , zero $end
$var wire 32 _ sub_result [31:0] $end
$var wire 1 ` sub_cout $end
$var wire 32 a src_a [31:0] $end
$var wire 32 b sll_result [31:0] $end
$var wire 32 c setlessthan_result [31:0] $end
$var wire 32 d or_result [31:0] $end
$var wire 32 e and_result [31:0] $end
$var wire 32 f alu_result [31:0] $end
$var wire 32 g add_result [31:0] $end
$var wire 1 h add_cout $end
$var reg 32 i result_mux [31:0] $end
$scope module adder $end
$var wire 32 j b [31:0] $end
$var wire 1 k cin $end
$var wire 33 l temp_sum [32:0] $end
$var wire 32 m sum [31:0] $end
$var wire 1 h cout $end
$var wire 32 n a [31:0] $end
$upscope $end
$scope module and_op $end
$var wire 32 o b [31:0] $end
$var wire 32 p result [31:0] $end
$var wire 32 q a [31:0] $end
$upscope $end
$scope module or_op $end
$var wire 32 r b [31:0] $end
$var wire 32 s result [31:0] $end
$var wire 32 t a [31:0] $end
$upscope $end
$scope module sll_op $end
$var wire 32 u result [31:0] $end
$var wire 5 v shamt [4:0] $end
$var wire 32 w shift8 [31:0] $end
$var wire 32 x shift4 [31:0] $end
$var wire 32 y shift2 [31:0] $end
$var wire 32 z shift16 [31:0] $end
$var wire 32 { shift1 [31:0] $end
$var wire 32 | a [31:0] $end
$upscope $end
$scope module slt_op $end
$var wire 32 } b [31:0] $end
$var wire 32 ~ result [31:0] $end
$var wire 32 !" difference [31:0] $end
$var wire 1 "" cout $end
$var wire 32 #" a [31:0] $end
$scope module sub $end
$var wire 32 $" b [31:0] $end
$var wire 32 %" difference [31:0] $end
$var wire 1 "" cout $end
$var wire 32 &" b_complement [31:0] $end
$var wire 32 '" a [31:0] $end
$scope module sub $end
$var wire 32 (" b [31:0] $end
$var wire 1 )" cin $end
$var wire 33 *" temp_sum [32:0] $end
$var wire 32 +" sum [31:0] $end
$var wire 1 "" cout $end
$var wire 32 ," a [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module subtractor $end
$var wire 32 -" b [31:0] $end
$var wire 32 ." difference [31:0] $end
$var wire 1 ` cout $end
$var wire 32 /" b_complement [31:0] $end
$var wire 32 0" a [31:0] $end
$scope module sub $end
$var wire 32 1" b [31:0] $end
$var wire 1 2" cin $end
$var wire 33 3" temp_sum [32:0] $end
$var wire 32 4" sum [31:0] $end
$var wire 1 ` cout $end
$var wire 32 5" a [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module pc $end
$var wire 1 ' clk $end
$var wire 32 6" pc_next [31:0] $end
$var wire 1 ( reset $end
$var reg 32 7" pc_current [31:0] $end
$upscope $end
$scope module pc_plus4_adder $end
$var wire 32 8" a [31:0] $end
$var wire 32 9" b [31:0] $end
$var wire 1 :" cin $end
$var wire 33 ;" temp_sum [32:0] $end
$var wire 32 <" sum [31:0] $end
$var wire 1 =" cout $end
$upscope $end
$scope module pc_target_adder $end
$var wire 32 >" a [31:0] $end
$var wire 32 ?" b [31:0] $end
$var wire 1 @" cin $end
$var wire 33 A" temp_sum [32:0] $end
$var wire 32 B" sum [31:0] $end
$var wire 1 C" cout $end
$upscope $end
$scope module rf $end
$var wire 1 ' clk $end
$var wire 5 D" read_reg1 [4:0] $end
$var wire 5 E" read_reg2 [4:0] $end
$var wire 1 / reg_write $end
$var wire 1 ( reset $end
$var wire 32 F" write_data [31:0] $end
$var wire 5 G" write_reg [4:0] $end
$var wire 32 H" read_data2 [31:0] $end
$var wire 32 I" read_data1 [31:0] $end
$var integer 32 J" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 K" i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 L" i [31:0] $end
$upscope $end
$scope task display_registers $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100000000000 L"
b100000000 K"
bx J"
b0 I"
bx H"
b1 G"
b101 F"
b101 E"
b0 D"
0C"
b101 B"
b101 A"
0@"
b101 ?"
b0 >"
0="
b100 <"
b100 ;"
0:"
b100 9"
b0 8"
b0 7"
b100 6"
b0 5"
b11111111111111111111111111111011 4"
b11111111111111111111111111111011 3"
02"
b11111111111111111111111111111011 1"
b0 0"
b11111111111111111111111111111011 /"
b11111111111111111111111111111011 ."
b101 -"
b0 ,"
b11111111111111111111111111111011 +"
b11111111111111111111111111111011 *"
0)"
b11111111111111111111111111111011 ("
b0 '"
b11111111111111111111111111111011 &"
b11111111111111111111111111111011 %"
b101 $"
b0 #"
0""
b11111111111111111111111111111011 !"
b1 ~
b101 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b101 v
b0 u
b0 t
b101 s
b101 r
b0 q
b0 p
b101 o
b0 n
b101 m
b101 l
0k
b101 j
b101 i
0h
b101 g
b101 f
b0 e
b101 d
b1 c
b0 b
b0 a
0`
b11111111111111111111111111111011 _
b101 ^
b0 ]
b101 \
b10100000000000010010011 [
b0 Z
b101 Y
b101 X
b0 W
b100 V
b100 U
b101 T
b101 S
b0 R
b101 Q
bx P
b0 O
b10100000000000010010011 N
b0 M
b0 L
b0 K
b10 J
b10011 I
b0 H
b10 G
b0 F
b0 E
b0 D
b0 C
b10 B
1A
0@
b0 ?
0>
0=
1<
0;
z:
b10011 9
08
b0 7
b0 6
b101 5
14
b0 3
02
b0 1
00
1/
0.
bx -
0,
b0 +
b10100000000000010010011 *
b0 )
1(
0'
b101 &
0%
b0 $
b0 #
bx "
b10100000000000010010011 !
$end
#5
b0 "
b0 -
b0 P
b0 H"
b100000 J"
1'
#10
0'
0(
#15
b11 S
b11 F"
b11 &
b11 5
b11 Y
b11 f
b11 i
b11111111111111111111111111111101 !"
b11111111111111111111111111111101 %"
b11111111111111111111111111111101 +"
b11111111111111111111111111111101 _
b11111111111111111111111111111101 ."
b11111111111111111111111111111101 4"
b11 v
b11 g
b11 m
b11 d
b11 s
b11111111111111111111111111111101 *"
b11111111111111111111111111111101 &"
b11111111111111111111111111111101 ("
b11111111111111111111111111111101 3"
b11111111111111111111111111111101 /"
b11111111111111111111111111111101 1"
b11 l
b11 Q
b11 ^
b11 j
b11 o
b11 r
b11 }
b11 $"
b11 -"
b1000 V
b1000 6"
b11 E"
b10 G"
b11 X
b11 \
b11 ?"
b1000 U
b1000 <"
b111 T
b111 B"
b1100000000000100010011 !
b1100000000000100010011 *
b1100000000000100010011 N
b1100000000000100010011 [
b1000 ;"
b111 A"
b100 $
b100 1
b100 W
b100 7"
b100 8"
b100 >"
1'
#20
0'
#25
b101000 b
b101000 u
b101000 z
b101000 w
b101000 x
b101000 y
b101000 S
b101000 F"
b1 e
b1 p
b0 c
b0 ~
b1010 {
0,
b101000 &
b101000 5
b101000 Y
b101000 f
b101000 i
b100 6
b100 D
b100 L
b100 ]
04
bx 3
bx E
bx M
bx Z
b10 _
b10 ."
b10 4"
1`
b10 !"
b10 %"
b10 +"
1""
b11 v
b1000 g
b1000 m
b111 d
b111 s
b11111111111111111111111111111101 &"
b11111111111111111111111111111101 ("
b11111111111111111111111111111101 /"
b11111111111111111111111111111101 1"
0A
bx ?
bx K
b100 C
b100 H
b100000000000000000000000000000010 3"
b100000000000000000000000000000010 *"
b101 R
b101 a
b101 n
b101 q
b101 t
b101 |
b101 #"
b101 '"
b101 ,"
b101 0"
b101 5"
b101 I"
b11 "
b11 -
b11 P
b11 H"
b1000 l
b11 Q
b11 ^
b11 j
b11 o
b11 r
b11 }
b11 $"
b11 -"
b1100 V
b1100 6"
b110011 9
b110011 I
b1 7
b1 F
b1 D"
b10 E"
b0 X
b0 \
b0 ?"
b1100 U
b1100 <"
b1000 T
b1000 B"
b1000001001000100110011 !
b1000001001000100110011 *
b1000001001000100110011 N
b1000001001000100110011 [
b1100 ;"
b1000 A"
b1000 $
b1000 1
b1000 W
b1000 7"
b1000 8"
b1000 >"
b100 )
1'
#30
0'
#35
b110 S
b110 F"
b1010 x
b1010 b
b1010 u
b1010 z
b110 &
b110 5
b110 Y
b110 f
b110 i
b1 X
b1 \
b1 ?"
b1010 {
b1010 y
b1010 w
b0 c
b0 ~
b0 6
b0 D
b0 L
b0 ]
14
b0 3
b0 E
b0 M
b0 Z
b100 !"
b100 %"
b100 +"
1""
b100 _
b100 ."
b100 4"
1`
1A
b0 ?
b0 K
b0 C
b0 H
b1 v
b110 g
b110 m
b1 e
b1 p
b101 d
b101 s
b100000000000000000000000000000100 *"
b11111111111111111111111111111111 &"
b11111111111111111111111111111111 ("
b100000000000000000000000000000100 3"
b11111111111111111111111111111111 /"
b11111111111111111111111111111111 1"
b10000 V
b10000 6"
b10011 9
b10011 I
b0 7
b0 F
b1 E"
b11 G"
b110 l
b1 Q
b1 ^
b1 j
b1 o
b1 r
b1 }
b1 $"
b1 -"
b10000 U
b10000 <"
b1101 T
b1101 B"
b100001000000110010011 !
b100001000000110010011 *
b100001000000110010011 N
b100001000000110010011 [
b101 "
b101 -
b101 P
b101 H"
b10000 ;"
b1101 A"
b1100 $
b1100 1
b1100 W
b1100 7"
b1100 8"
b1100 >"
b1000 )
1'
#40
0'
#45
b0 b
b0 u
b0 z
b0 w
b0 x
b1 S
b1 F"
b0 y
b1 c
b1 ~
b0 {
b1 &
b1 5
b1 Y
b1 f
b1 i
b11111111111111111111111111111111 _
b11111111111111111111111111111111 ."
b11111111111111111111111111111111 4"
0`
b11111111111111111111111111111111 !"
b11111111111111111111111111111111 %"
b11111111111111111111111111111111 +"
0""
b1 d
b1 s
b0 e
b0 p
b1 g
b1 m
b11111111111111111111111111111111 3"
b11111111111111111111111111111111 *"
b1 l
b0 R
b0 a
b0 n
b0 q
b0 t
b0 |
b0 #"
b0 '"
b0 ,"
b0 0"
b0 5"
b0 I"
b10100 V
b10100 6"
b0 D"
b1111 G"
b10100 U
b10100 <"
b10001 T
b10001 B"
b100000000011110010011 !
b100000000011110010011 *
b100000000011110010011 N
b100000000011110010011 [
b10100 ;"
b10001 A"
b10000 $
b10000 1
b10000 W
b10000 7"
b10000 8"
b10000 >"
b1100 )
1'
#50
0'
#55
b0 S
b0 F"
1,
b0 &
b0 5
b0 Y
b0 f
b0 i
b100 6
b100 D
b100 L
b100 ]
b100 C
b100 H
b11000 V
b11000 6"
b1 7
b1 F
b11111 D"
b101 G"
b11000 U
b11000 <"
b10101 T
b10101 B"
b111111001001010010011 !
b111111001001010010011 *
b111111001001010010011 N
b111111001001010010011 [
b11000 ;"
b10101 A"
b10100 $
b10100 1
b10100 W
b10100 7"
b10100 8"
b10100 >"
b10000 )
1'
#60
0'
#65
b101000 b
b101000 u
b101000 z
b101000 w
b101000 x
b0x0x000 S
b0x0x000 F"
b101000 y
b0 c
b0 ~
b101000 {
0,
b101000 &
b101000 5
b101000 Y
b101000 f
b101000 i
b0 6
b0 D
b0 L
b0 ]
x.
1%
b1 3
b1 E
b1 M
b1 Z
0/
b101000 _
b101000 ."
b101000 4"
0`
b101000 !"
b101000 %"
b101000 +"
0""
b0 v
b101000 g
b101000 m
b101000 d
b101000 s
b0 &"
b0 ("
b0 /"
b0 1"
b0 B
b0 G
b0 J
x;
1=
b1 ?
b1 K
0<
b0 C
b0 H
b101000 3"
b101000 *"
b101000 R
b101000 a
b101000 n
b101000 q
b101000 t
b101000 |
b101000 #"
b101000 '"
b101000 ,"
b101000 0"
b101000 5"
b101000 I"
b0 "
b0 -
b0 P
b0 H"
b101000 l
b0 Q
b0 ^
b0 j
b0 o
b0 r
b0 }
b0 $"
b0 -"
b11100 V
b11100 6"
b100011 9
b100011 I
b10 7
b10 F
b10 D"
b101 E"
b0 G"
b0 X
b0 \
b0 ?"
b11100 U
b11100 <"
b11000 T
b11000 B"
b10100010010000000100011 !
b10100010010000000100011 *
b10100010010000000100011 N
b10100010010000000100011 [
b11100 ;"
b11000 A"
b11000 $
b11000 1
b11000 W
b11000 7"
b11000 8"
b11000 >"
b10100 )
1'
#70
0'
#75
b101000 b
b101000 u
b101000 z
b101000 w
b0 S
b0 F"
b101000 y
b101000 x
b101000 &
b101000 5
b101000 Y
b101000 f
b101000 i
b101000 !"
b101000 %"
b101000 +"
0""
b101000 _
b101000 ."
b101000 4"
0`
1.
0%
b0 3
b0 E
b0 M
b0 Z
1/
b0 v
b101000 g
b101000 m
b101000 d
b101000 s
b101000 *"
b0 &"
b0 ("
b101000 3"
b0 /"
b0 1"
1;
0=
b0 ?
b0 K
1<
b101000 l
b0 Q
b0 ^
b0 j
b0 o
b0 r
b0 }
b0 $"
b0 -"
b100000 V
b100000 6"
b11 9
b11 I
b0 E"
b110 G"
b0 X
b0 \
b0 ?"
b100000 U
b100000 <"
b11100 T
b11100 B"
b10010001100000011 !
b10010001100000011 *
b10010001100000011 N
b10010001100000011 [
b100000 ;"
b11100 A"
b11100 $
b11100 1
b11100 W
b11100 7"
b11100 8"
b11100 >"
b11000 )
1'
#80
0'
#85
10
b0 b
b0 u
b0 z
1,
b0 w
b0 S
b0 F"
b0 x
b1 6
b1 D
b1 L
b1 ]
b0 c
b0 ~
b0 y
b0 &
b0 5
b0 Y
b0 f
b0 i
b1 C
b1 H
x.
04
b10 3
b10 E
b10 M
b10 Z
0/
b0 _
b0 ."
b0 4"
b0 !"
b0 %"
b0 +"
b0 {
b0 v
b0 g
b0 m
b0 d
b0 s
b0 &"
b0 ("
b0 /"
b0 1"
b1 B
b1 G
b1 J
1@
x;
0A
b10 ?
b10 K
0<
b0 3"
b0 *"
b0 R
b0 a
b0 n
b0 q
b0 t
b0 |
b0 #"
b0 '"
b0 ,"
b0 0"
b0 5"
b0 I"
b0 l
b0 Q
b0 ^
b0 j
b0 o
b0 r
b0 }
b0 $"
b0 -"
b101000 V
b101000 6"
b1100011 9
b1100011 I
b0 7
b0 F
b101 D"
b110 E"
b1000 G"
b1000 X
b1000 \
b1000 ?"
b100100 U
b100100 <"
b101000 T
b101000 B"
b11000101000010001100011 !
b11000101000010001100011 *
b11000101000010001100011 N
b11000101000010001100011 [
b100100 ;"
b101000 A"
b100000 $
b100000 1
b100000 W
b100000 7"
b100000 8"
b100000 >"
b11100 )
1'
#90
0'
#95
b100 S
b100 F"
b1 c
b1 ~
b11111111111111111111111111111100 !"
b11111111111111111111111111111100 %"
b11111111111111111111111111111100 +"
b11111111111111111111111111111100 _
b11111111111111111111111111111100 ."
b11111111111111111111111111111100 4"
0,
b100 &
b100 5
b100 Y
b100 f
b100 i
b100 v
b100 g
b100 m
b100 d
b100 s
b11111111111111111111111111111100 *"
b11111111111111111111111111111100 &"
b11111111111111111111111111111100 ("
b11111111111111111111111111111100 3"
b11111111111111111111111111111100 /"
b11111111111111111111111111111100 1"
b0 6
b0 D
b0 L
b0 ]
b100 l
b100 Q
b100 ^
b100 j
b100 o
b100 r
b100 }
b100 $"
b100 -"
b0 C
b0 H
00
0.
14
b0 3
b0 E
b0 M
b0 Z
1/
b10 B
b10 G
b10 J
0@
0;
1A
b0 ?
b0 K
1<
b101100 V
b101100 6"
b10011 9
b10011 I
b0 D"
b100 E"
b111 G"
b100 X
b100 \
b100 ?"
b101100 U
b101100 <"
b101100 T
b101100 B"
b10000000000001110010011 !
b10000000000001110010011 *
b10000000000001110010011 N
b10000000000001110010011 [
b101100 ;"
b101100 A"
b101000 $
b101000 1
b101000 W
b101000 7"
b101000 8"
b101000 >"
b100000 )
1'
#100
0'
#105
b0 S
b0 F"
b0 c
b0 ~
b1 6
b1 D
b1 L
b1 ]
10
1,
b0 &
b0 5
b0 Y
b0 f
b0 i
b0 !"
b0 %"
b0 +"
b0 _
b0 ."
b0 4"
b1 C
b1 H
x.
04
b10 3
b10 E
b10 M
b10 Z
0/
b0 v
b0 g
b0 m
b0 d
b0 s
b0 *"
b0 &"
b0 ("
b0 3"
b0 /"
b0 1"
b1 B
b1 G
b1 J
1@
x;
0A
b10 ?
b10 K
0<
b0 l
b0 Q
b0 ^
b0 j
b0 o
b0 r
b0 }
b0 $"
b0 -"
b101100 V
b101100 6"
b1100011 9
b1100011 I
b0 E"
b0 G"
b0 X
b0 \
b0 ?"
b110000 U
b110000 <"
b101100 T
b101100 B"
b1100011 !
b1100011 *
b1100011 N
b1100011 [
b110000 ;"
b101100 A"
b101100 $
b101100 1
b101100 W
b101100 7"
b101100 8"
b101100 >"
b101000 )
1'
#110
0'
#115
b101100 )
1'
#120
0'
#125
1'
#130
0'
#135
1'
#140
0'
#145
1'
#150
0'
#155
1'
#160
0'
#165
1'
#170
0'
#175
1'
#180
0'
#185
1'
#190
0'
#195
1'
#200
0'
#205
1'
#210
0'
#215
1'
#220
0'
#225
1'
#230
0'
#235
1'
#240
0'
#245
1'
#250
0'
#255
1'
#260
0'
#265
1'
#270
0'
#275
1'
#280
0'
#285
1'
#290
0'
#295
1'
#300
0'
#305
1'
#310
0'
#315
1'
#320
0'
#325
1'
#330
0'
#335
1'
#340
0'
#345
1'
#350
0'
#355
1'
#360
0'
#365
1'
#370
0'
#375
1'
#380
0'
#385
1'
#390
0'
#395
1'
#400
0'
#405
1'
#410
0'
#415
1'
#420
0'
#425
1'
#430
0'
#435
1'
#440
0'
#445
1'
#450
0'
#455
1'
#460
0'
#465
1'
#470
0'
#475
1'
#480
0'
#485
1'
#490
0'
#495
1'
#500
0'
#505
1'
#510
0'
